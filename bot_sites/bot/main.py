# bot/main.py
import asyncio
import json
import logging
import sqlite3
from typing import Dict, List

from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, CallbackQuery, FSInputFile

from config import BOT_TOKEN, ADMINS, SQLITE_PATH, NGINX_LOG_FILE, DEFAULT_CONTENT
from .keyboards import (
    admin_reply_kb, main_menu,
    mirrors_menu, domain_row,
    content_menu, contacts_menu, managers_menu,
    stats_menu
)
from .storage import (
    # mirrors
    list_domains, count_domains, add_domains, delete_domains, activate_hosts,
    # content
    get_content, update_content_fields,
    contacts_list, contacts_add, contacts_edit, contacts_delete, contacts_set,
    # managers
    get_managers, set_manager,
    # find/replace
    find_occurrences, replace_exact_everywhere,
)
from services.stats import build_stats, export_stats_csv
from scripts.issue_certs import issue_for_domains_interactive
from scripts.nginx_sync import sync_all_domains

original_dp = dp

# -------------------- –õ–û–ì–ò --------------------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s [%(name)s] %(message)s"
)
log = logging.getLogger("mirrorhub.bot")


# -------------------- –ê–í–¢–û-–ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–î --------------------
def _ensure_db():
    conn = sqlite3.connect(SQLITE_PATH)
    c = conn.cursor()
    c.execute("PRAGMA journal_mode=WAL;")
    c.execute("""CREATE TABLE IF NOT EXISTS domain (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        host TEXT UNIQUE NOT NULL,
        status TEXT NOT NULL CHECK(status IN ('hot','active','blocked')),
        ssl_ok INTEGER NOT NULL DEFAULT 0,
        created_at TEXT,
        updated_at TEXT
    );""")
    c.execute("""CREATE TABLE IF NOT EXISTS content (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        title TEXT,
        subtitle TEXT,
        contacts TEXT NOT NULL DEFAULT '[]',
        footer TEXT,
        updated_at TEXT
    );""")
    c.execute("""CREATE TABLE IF NOT EXISTS event_log (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        event_type TEXT,
        payload TEXT,
        created_at TEXT
    );""")
    c.execute("CREATE UNIQUE INDEX IF NOT EXISTS idx_domain_host ON domain(host);")
    c.execute("CREATE INDEX IF NOT EXISTS idx_domain_status ON domain(status);")
    # —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
    cnt = c.execute("SELECT COUNT(1) FROM content").fetchone()[0]
    if cnt == 0:
        dc = DEFAULT_CONTENT or {"title": "", "subtitle": "", "contacts": [], "footer": ""}
        c.execute(
            "INSERT INTO content (title, subtitle, contacts, footer, updated_at) VALUES (?,?,?,?,datetime('now'))",
            (dc.get("title",""), dc.get("subtitle",""), json.dumps(dc.get("contacts",[]), ensure_ascii=False), dc.get("footer",""))
        )
        c.execute(
            "INSERT INTO event_log (event_type, payload, created_at) VALUES (?,?,datetime('now'))",
            ("bootstrap_content", json.dumps({"via":"bot_start"}, ensure_ascii=False))
        )
    conn.commit()
    conn.close()
    log.info("DB ensured at %s", SQLITE_PATH)

_ensure_db()


# -------------------- –ë–û–¢ --------------------
bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

def is_admin(uid: int) -> bool:
    return uid in ADMINS

# –ø—Ä–æ—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–Ω–æ–≥–æ—à–∞–≥–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
PENDING: Dict[int, Dict] = {}  # chat_id -> {"action": str, "step": int, "data": {...}}

def _set_state(chat_id: int, action: str, step: int = 1, data: Dict | None = None):
    PENDING[chat_id] = {"action": action, "step": step, "data": data or {}}

def _clear_state(chat_id: int):
    PENDING.pop(chat_id, None)


# ===================== –ö–û–ú–ê–ù–î–´ =====================

@dp.message(CommandStart())
async def cmd_start(m: Message):
    # –¢–ò–•–ò–ô /start ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∏–∫–æ–º—É
    return

@dp.message(Command("admin"))
async def cmd_admin(m: Message):
    if not is_admin(m.from_user.id):
        return
    await m.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())


@dp.message(F.text == "üõ† –ê–¥–º–∏–Ω–∫–∞")
async def open_admin_button(m: Message):
    if not is_admin(m.from_user.id):
        return
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ 1 —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–æ—Ç–æ—Ä–æ–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–∞–∑–¥–µ–ª—ã
    await m.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())


@dp.message(Command("help"))
async def cmd_help(m: Message):
    if not is_admin(m.from_user.id):
        return
    await m.answer(
        "‚Ä¢ üåê –ó–µ—Ä–∫–∞–ª–∞ ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–º–µ–Ω—ã, –∞–≤—Ç–æ-SSL –∏ –≤–∫–ª—é—á–µ–Ω–∏–µ\n"
        "‚Ä¢ ‚úçÔ∏è –ö–æ–Ω—Ç–µ–Ω—Ç ‚Äî –∑–∞–≥–æ–ª–æ–≤–æ–∫/–ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫/—Ñ—É—Ç–µ—Ä/–∫–æ–Ω—Ç–∞–∫—Ç—ã/–º–µ–Ω–µ–¥–∂–µ—Ä—ã\n"
        "‚Ä¢ üîé/üîÅ ‚Äî –ø–æ–∏—Å–∫/–∑–∞–º–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∏ –≤–æ –≤—Å–µ—Ö –ø–æ–ª—è—Ö\n"
        "‚Ä¢ üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ‚Äî –æ—Ç—á—ë—Ç—ã –∏ —ç–∫—Å–ø–æ—Ä—Ç",
        reply_markup=main_menu()
    )


# ===================== –ó–ï–†–ö–ê–õ–ê =====================

@dp.callback_query(F.data == "mir:menu")
async def mir_menu(c: CallbackQuery):
    await c.message.answer(
        "üåê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–µ—Ä–∫–∞–ª–∞–º–∏:\n"
        "‚Ä¢ ‚ûï –î–æ–±–∞–≤–∏—Ç—å ‚Äî –≤—Å—Ç–∞–≤—å –¥–æ–º–µ–Ω—ã –ø–æ—Å—Ç—Ä–æ—á–Ω–æ ‚Üí –±–æ—Ç —Å–∞–º –≤—ã–ø—É—Å—Ç–∏—Ç SSL –∏ –≤–∫–ª—é—á–∏—Ç —Ä–∞–±–æ—á–∏–µ\n"
        "‚Ä¢ ‚úÖ/‚õîÔ∏è ‚Äî –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –≤—Å–µ\n"
        "‚Ä¢ üìã –°–ø–∏—Å–æ–∫ ‚Äî –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ (–≤–∫–ª/–≤—ã–∫–ª/—É–¥–∞–ª–∏—Ç—å)",
        reply_markup=mirrors_menu()
    )
    await c.answer()


@dp.callback_query(F.data == "mir:add")
async def mir_add(c: CallbackQuery):
    _set_state(c.message.chat.id, "mir_add")
    await c.message.answer(
        "–í—Å—Ç–∞–≤—å –¥–æ–º–µ–Ω—ã –ø–æ—Å—Ç—Ä–æ—á–Ω–æ. –ú–æ–∂–Ω–æ –∫–∏–¥–∞—Ç—å –∏ —Å—Å—ã–ª–∫–∏ ‚Äî —è –≤—Å—ë –ø–æ—á–∏—â—É –¥–æ –¥–æ–º–µ–Ω–∞.\n"
        "–ü—Ä–∏–º–µ—Ä:\n<code>\nabrakabrafunniestday.shop\nhttps://abrakabrafunniestday.shop/\n</code>"
    )
    await c.answer()


@dp.callback_query(F.data == "mir:ssl_all")
async def mir_ssl_all(c: CallbackQuery):
    with sqlite3.connect(SQLITE_PATH) as conn:
        conn.row_factory = sqlite3.Row
        doms = [r["host"] for r in conn.execute("SELECT host FROM domain WHERE ssl_ok=0 ORDER BY id ASC")]
    if not doms:
        await c.message.answer("–í—Å–µ –¥–æ–º–µ–Ω—ã —É–∂–µ —Å SSL.")
        return await c.answer()
    await c.message.answer(f"üîê –í—ã–ø—É—Å–∫–∞—é SSL –¥–ª—è {len(doms)} –¥–æ–º–µ–Ω–æ–≤...")
    ok, report = issue_for_domains_interactive(doms)
    ok_cnt = sum(1 for d, s, _ in report if d != "system" and s == "ok")
    await c.message.answer(f"SSL –≥–æ—Ç–æ–≤–æ: {ok_cnt}/{len(doms)}")

    activated = activate_hosts(doms)
    await c.message.answer(f"‚úÖ –ê–≤—Ç–æ-–≤–∫–ª—é—á–µ–Ω–æ –¥–æ–º–µ–Ω–æ–≤: {activated}")

    rep = sync_all_domains()
    await c.message.answer(f"üîÅ Nginx –ø–æ—Å–ª–µ SSL/–∞–∫—Ç–∏–≤–∞—Ü–∏–∏:\n{rep}")
    await c.answer()


@dp.callback_query(F.data == "mir:list")
async def mir_list(c: CallbackQuery):
    rows = list_domains(None, 0, 200)
    if not rows:
        await c.message.answer("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")
        return await c.answer()
    await c.message.answer("üìã –°–ø–∏—Å–æ–∫ –∑–µ—Ä–∫–∞–ª (–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ):")
    for r in rows:
        await c.message.answer(".", reply_markup=domain_row(r["host"], r["status"], bool(r["ssl_ok"])))
    await c.answer()


@dp.callback_query(F.data == "mir:enable_all")
async def mir_enable_all(c: CallbackQuery):
    with sqlite3.connect(SQLITE_PATH) as conn:
        conn.execute("UPDATE domain SET status='active' WHERE ssl_ok=1")
        conn.commit()
    await c.message.answer("‚úÖ –í—Å–µ –¥–æ–º–µ–Ω—ã —Å SSL –≤–∫–ª—é—á–µ–Ω—ã (active).")
    await c.answer()


@dp.callback_query(F.data == "mir:disable_all")
async def mir_disable_all(c: CallbackQuery):
    with sqlite3.connect(SQLITE_PATH) as conn:
        conn.execute("UPDATE domain SET status='hot' WHERE status='active'")
        conn.commit()
    await c.message.answer("‚õîÔ∏è –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è (hot).")
    await c.answer()


@dp.callback_query(F.data.startswith("mir:enable:"))
async def mir_enable_one(c: CallbackQuery):
    host = c.data.split(":", 2)[2]
    with sqlite3.connect(SQLITE_PATH) as conn:
        conn.execute("UPDATE domain SET status='active' WHERE host=? AND ssl_ok=1", (host,))
        conn.commit()
    await c.message.edit_text(f"‚úÖ <code>{host}</code> –≤–∫–ª—é—á—ë–Ω.", reply_markup=None)
    await c.answer()


@dp.callback_query(F.data.startswith("mir:disable:"))
async def mir_disable_one(c: CallbackQuery):
    host = c.data.split(":", 2)[2]
    with sqlite3.connect(SQLITE_PATH) as conn:
        conn.execute("UPDATE domain SET status='hot' WHERE host=?", (host,))
        conn.commit()
    await c.message.edit_text(f"‚õîÔ∏è <code>{host}</code> –≤—ã–∫–ª—é—á–µ–Ω.", reply_markup=None)
    await c.answer()


@dp.callback_query(F.data.startswith("mir:del:"))
async def mir_delete_one(c: CallbackQuery):
    host = c.data.split(":", 2)[2]
    delete_domains([host])
    rep = sync_all_domains()
    await c.message.edit_text(f"üóë –£–¥–∞–ª—ë–Ω <code>{host}</code>\nNginx: {rep}", reply_markup=None)
    await c.answer()


# ===================== –ö–û–ù–¢–ï–ù–¢ =====================

@dp.callback_query(F.data == "cnt:menu")
async def cnt_menu(c: CallbackQuery):
    await c.message.answer(
        "‚úçÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –í–°–ï–• –∑–µ—Ä–∫–∞–ª —Å—Ä–∞–∑—É:\n"
        "‚Ä¢ ü™™ –ó–∞–≥–æ–ª–æ–≤–æ–∫ / üìù –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ / üìú –§—É—Ç–µ—Ä ‚Äî –ø—Ä–∏—à–ª—ë—à—å —Ç–µ–∫—Å—Ç ‚Üí –æ–±–Ω–æ–≤–∏–º\n"
        "‚Ä¢ üìá –ö–æ–Ω—Ç–∞–∫—Ç—ã ‚Äî –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–º\n"
        "‚Ä¢ üë§ –ú–µ–Ω–µ–¥–∂–µ—Ä—ã ‚Äî –±—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è @manager_one/@manager_two\n"
        "‚Ä¢ üîé –ù–∞–π—Ç–∏ —Å—Ç—Ä–æ–∫—É / üîÅ –ó–∞–º–µ–Ω–∏—Ç—å —Å—Ç—Ä–æ–∫—É\n"
        "‚Ä¢ üëÄ –ü—Ä–µ–≤—å—é ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç",
        reply_markup=content_menu()
    )
    await c.answer()


@dp.callback_query(F.data == "cnt:title")
async def cnt_title(c: CallbackQuery):
    _set_state(c.message.chat.id, "set_title")
    await c.message.answer("ü™™ –ü—Ä–∏—à–ª–∏ –Ω–æ–≤—ã–π <b>–ó–∞–≥–æ–ª–æ–≤–æ–∫</b> (–æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π).")
    await c.answer()

@dp.callback_query(F.data == "cnt:subtitle")
async def cnt_subtitle(c: CallbackQuery):
    _set_state(c.message.chat.id, "set_subtitle")
    await c.message.answer("üìù –ü—Ä–∏—à–ª–∏ –Ω–æ–≤—ã–π <b>–ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫</b> (–æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π).")
    await c.answer()

@dp.callback_query(F.data == "cnt:footer")
async def cnt_footer(c: CallbackQuery):
    _set_state(c.message.chat.id, "set_footer")
    await c.message.answer("üìú –ü—Ä–∏—à–ª–∏ –Ω–æ–≤—ã–π <b>–§—É—Ç–µ—Ä</b> (–æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π).")
    await c.answer()


# --- –∫–æ–Ω—Ç–∞–∫—Ç—ã (–æ–±—â–∏–µ) ---

@dp.callback_query(F.data == "cnt:contacts")
async def cnt_contacts(c: CallbackQuery):
    lst = contacts_list()
    lines = ["üìá –¢–µ–∫—É—â–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã:"]
    if not lst:
        lines.append("‚Äî –ø—É—Å—Ç–æ ‚Äî")
    else:
        for i, item in enumerate(lst, start=1):
            lines.append(f"{i}. {item.get('label','')} ‚Äî {item.get('url','')}")
    await c.message.answer("\n".join(lines), reply_markup=contacts_menu())
    await c.answer()

@dp.callback_query(F.data == "cnt:contacts:add")
async def cnt_contacts_add(c: CallbackQuery):
    _set_state(c.message.chat.id, "contact_add")
    await c.message.answer("‚ûï –ü—Ä–∏—à–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n<code>–ú–µ—Ç–∫–∞ | https://—Å—Å—ã–ª–∫–∞</code>")
    await c.answer()

@dp.callback_query(F.data == "cnt:contacts:edit")
async def cnt_contacts_edit(c: CallbackQuery):
    _set_state(c.message.chat.id, "contact_edit")
    await c.message.answer("‚úèÔ∏è –ü—Ä–∏—à–ª–∏ –ø—Ä–∞–≤–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n<code>–ù–æ–º–µ—Ä | –ù–æ–≤–∞—è –º–µ—Ç–∫–∞ | https://–Ω–æ–≤–∞—è_—Å—Å—ã–ª–∫–∞</code>")
    await c.answer()

@dp.callback_query(F.data == "cnt:contacts:del")
async def cnt_contacts_del(c: CallbackQuery):
    _set_state(c.message.chat.id, "contact_del")
    await c.message.answer("üóë –ü—Ä–∏—à–ª–∏ –Ω–æ–º–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª). –ü—Ä–∏–º–µ—Ä: <code>2 5 6</code>")
    await c.answer()

@dp.callback_query(F.data == "cnt:contacts:export")
async def cnt_contacts_export(c: CallbackQuery):
    lst = contacts_list()
    await c.message.answer(f"<code>{json.dumps(lst, ensure_ascii=False, indent=2)}</code>")
    await c.answer()

@dp.callback_query(F.data == "cnt:contacts:import")
async def cnt_contacts_import(c: CallbackQuery):
    _set_state(c.message.chat.id, "contacts_import")
    await c.message.answer("üì• –ü—Ä–∏—à–ª–∏ JSON —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤. –ü—Ä–∏–º–µ—Ä:\n<code>[{\"label\":\"–ú–µ–Ω–µ–¥–∂–µ—Ä\",\"url\":\"https://t.me/user\"}]</code>")
    await c.answer()


# --- –º–µ–Ω–µ–¥–∂–µ—Ä—ã (–±—ã—Å—Ç—Ä–∞—è –∑–∞–º–µ–Ω–∞) ---

@dp.callback_query(F.data == "cnt:managers")
async def cnt_managers(c: CallbackQuery):
    one, two = get_managers()
    await c.message.answer(
        "üë§ –ë—ã—Å—Ç—Ä–∞—è –∑–∞–º–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤.\n"
        "–ù–∞–∂–º–∏ –Ω–∞ –Ω—É–∂–Ω–æ–≥–æ ‚Üí –ø—Ä–∏—à–ª–∏ username –≤ –≤–∏–¥–µ <code>newmanager</code> –∏–ª–∏ <code>@newmanager</code>.\n"
        "–°—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –≤–∏–¥–∞ <code>/go/telegram/USERNAME</code>, —Ç–µ–∫—Å—Ç ‚Äî <code>@USERNAME</code>.",
        reply_markup=managers_menu(one, two)
    )
    await c.answer()

@dp.callback_query(F.data == "cnt:man:set:1")
async def cnt_man_set_one(c: CallbackQuery):
    _set_state(c.message.chat.id, "set_manager_1")
    await c.message.answer("üë§ –ú–µ–Ω–µ–¥–∂–µ—Ä 1 ‚Üí –ø—Ä–∏—à–ª–∏ username (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>manager_one</code> –∏–ª–∏ <code>@manager_one</code>).")
    await c.answer()

@dp.callback_query(F.data == "cnt:man:set:2")
async def cnt_man_set_two(c: CallbackQuery):
    _set_state(c.message.chat.id, "set_manager_2")
    await c.message.answer("üë§ –ú–µ–Ω–µ–¥–∂–µ—Ä 2 ‚Üí –ø—Ä–∏—à–ª–∏ username (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>manager_two</code> –∏–ª–∏ <code>@manager_two</code>).")
    await c.answer()


# --- find / replace ---

@dp.callback_query(F.data == "cnt:find")
async def cnt_find(c: CallbackQuery):
    _set_state(c.message.chat.id, "find_string")
    await c.message.answer("üîé –í–≤–µ–¥–∏ —Ç–æ—á–Ω—É—é —Å—Ç—Ä–æ–∫—É, –∫–æ—Ç–æ—Ä—É—é –∏—Å–∫–∞—Ç—å –ø–æ –≤—Å–µ–º –ø–æ–ª—è–º (–∑–∞–≥–æ–ª–æ–≤–æ–∫/–ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫/—Ñ—É—Ç–µ—Ä/–∫–æ–Ω—Ç–∞–∫—Ç—ã).")
    await c.answer()

@dp.callback_query(F.data == "cnt:replace")
async def cnt_replace(c: CallbackQuery):
    _set_state(c.message.chat.id, "replace_old", step=1, data={})
    await c.message.answer("üîÅ –®–∞–≥ 1/2. –ü—Ä–∏—à–ª–∏ —Å—Ç—Ä–æ–∫—É, –∫–æ—Ç–æ—Ä—É—é –Ω–∞–¥–æ –∑–∞–º–µ–Ω–∏—Ç—å (—Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ).")
    await c.answer()


@dp.callback_query(F.data == "cnt:preview")
async def cnt_preview(c: CallbackQuery):
    cont = get_content()
    if not cont:
        await c.message.answer("‚Äî –∫–æ–Ω—Ç–µ–Ω—Ç –µ—â—ë –Ω–µ –∑–∞–¥–∞–Ω ‚Äî")
        return await c.answer()
    lines = [
        "üëÄ <b>–ü—Ä–µ–≤—å—é</b>",
        f"<b>{cont.get('title','')}</b>",
        cont.get("subtitle", ""),
        "",
        "–ö–æ–Ω—Ç–∞–∫—Ç—ã:",
    ]
    for item in cont.get("contacts", []):
        lines.append(f"‚Ä¢ {item.get('label','')}: {item.get('url','')}")
    lines.append("")
    lines.append(cont.get("footer", ""))
    await c.message.answer("\n".join(lines))
    await c.answer()


# ===================== –°–¢–ê–¢–ò–°–¢–ò–ö–ê =====================

@dp.callback_query(F.data == "st:menu")
async def st_menu(c: CallbackQuery):
    await c.message.answer(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞. –ò—Å—Ç–æ—á–Ω–∏–∫ –ª–æ–≥–æ–≤: <code>{NGINX_LOG_FILE}</code>", reply_markup=stats_menu())
    await c.answer()

@dp.callback_query(F.data == "st:export")
async def st_export(c: CallbackQuery):
    path = export_stats_csv()
    await c.message.answer_document(FSInputFile(str(path)), caption="üì§ –≠–∫—Å–ø–æ—Ä—Ç CSV")
    await c.answer()

@dp.callback_query(F.data.startswith("st:range:"))
async def st_range(c: CallbackQuery):
    rng = c.data.split(":")[2]
    days = None if rng == "all" else int(rng)
    await c.message.answer(build_stats(days=days))
    await c.answer()


# ===================== –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–ê (–º–Ω–æ–≥–æ—à–∞–≥–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏) =====================

@dp.message()
async def text_flow(m: Message):
    if not is_admin(m.from_user.id):
        return

    st = PENDING.get(m.chat.id)
    if not st:
        return

    action = st["action"]
    step = st.get("step", 1)
    data = st.get("data", {})

    # --- –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–º–µ–Ω–æ–≤: –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ü–∏–∫–ª ---
    if action == "mir_add":
        raw_hosts = [h.strip() for h in (m.text or "").splitlines() if h.strip()]
        added, accepted, rejected, already_ssl = add_domains(raw_hosts, status="hot")

        lines: List[str] = [f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ë–î: {added}"]
        if accepted:
            lines.append("‚úÖ –ü—Ä–∏–Ω—è—Ç—ã:")
            lines += [f"‚Ä¢ {h}" for h in accepted]
        if rejected:
            lines.append("")
            lines.append("üö´ –û—Ç–±—Ä–æ—à–µ–Ω—ã (–Ω–µ –ø–æ—Ö–æ–∂–∏ –Ω–∞ –¥–æ–º–µ–Ω—ã):")
            lines += [f"‚Ä¢ {h}" for h in rejected]
        if already_ssl:
            lines.append("")
            lines.append("üîê –£–∂–µ –µ—Å—Ç—å SSL (–ø–æ–º–µ—á–µ–Ω—ã ssl_ok=1):")
            lines += [f"‚Ä¢ {h}" for h in already_ssl]

        await m.answer("\n".join(lines) if lines else "–ù–µ—á–µ–≥–æ –¥–æ–±–∞–≤–∏—Ç—å.")

        rep = sync_all_domains()
        await m.answer(f"üîÑ Nginx:\n{rep}")

        need_issue = [h for h in accepted if h not in already_ssl]
        ok_domains: List[str] = []
        if need_issue:
            await m.answer(f"üîê –í—ã–ø—É—Å–∫–∞—é SSL –¥–ª—è {len(need_issue)} –¥–æ–º–µ–Ω–æ–≤‚Ä¶")
            ok, report = issue_for_domains_interactive(need_issue)
            ok_cnt = sum(1 for d, s, _ in report if d != "system" and s == "ok")
            await m.answer(f"SSL –≥–æ—Ç–æ–≤–æ: {ok_cnt}/{len(need_issue)}")
            ok_domains = [d for (d, s, msg) in report if d != "system" and s == "ok"]

        to_activate = sorted(set(ok_domains + already_ssl))
        if to_activate:
            activated = activate_hosts(to_activate)
            await m.answer(f"‚úÖ –ê–≤—Ç–æ-–≤–∫–ª—é—á–µ–Ω–æ –¥–æ–º–µ–Ω–æ–≤: {activated}")
        else:
            await m.answer("‚ÑπÔ∏è –ù–µ—Ç –¥–æ–º–µ–Ω–æ–≤ –¥–ª—è –∞–≤—Ç–æ-–≤–∫–ª—é—á–µ–Ω–∏—è.")

        rep2 = sync_all_domains()
        await m.answer(f"üîÅ –ì–æ—Ç–æ–≤–æ. Nginx –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:\n{rep2}")

        _clear_state(m.chat.id)
        return

    # --- –ø—Ä–æ—Å—Ç—ã–µ –ø–æ–ª—è (title/subtitle/footer) ---
    if action == "set_title":
        update_content_fields(title=m.text or "")
        await m.answer("ü™™ –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ–±–Ω–æ–≤–ª—ë–Ω.")
        _clear_state(m.chat.id)
        return

    if action == "set_subtitle":
        update_content_fields(subtitle=m.text or "")
        await m.answer("üìù –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–±–Ω–æ–≤–ª—ë–Ω.")
        _clear_state(m.chat.id)
        return

    if action == "set_footer":
        update_content_fields(footer=m.text or "")
        await m.answer("üìú –§—É—Ç–µ—Ä –æ–±–Ω–æ–≤–ª—ë–Ω.")
        _clear_state(m.chat.id)
        return

    # --- –∫–æ–Ω—Ç–∞–∫—Ç—ã ---
    if action == "contact_add":
        raw = (m.text or "")
        if "|" not in raw:
            await m.answer("‚ùå –§–æ—Ä–º–∞—Ç: <code>–ú–µ—Ç–∫–∞ | https://—Å—Å—ã–ª–∫–∞</code>")
            return
        label, url = [s.strip() for s in raw.split("|", 1)]
        contacts_add(label, url)
        await m.answer("‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω.")
        _clear_state(m.chat.id)
        return

    if action == "contact_edit":
        raw = (m.text or "")
        parts = [s.strip() for s in raw.split("|")]
        if len(parts) < 3 or not parts[0].isdigit():
            await m.answer("‚ùå –§–æ—Ä–º–∞—Ç: <code>–ù–æ–º–µ—Ä | –ù–æ–≤–∞—è –º–µ—Ç–∫–∞ | https://–Ω–æ–≤–∞—è_—Å—Å—ã–ª–∫–∞</code>")
            return
        idx = int(parts[0])
        label = parts[1]
        url = parts[2]
        ok = contacts_edit(idx, label=label, url=url)
        await m.answer("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–æ." if ok else "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.")
        _clear_state(m.chat.id)
        return

    if action == "contact_del":
        nums = [(t.strip()) for t in (m.text or "").split()]
        indices = [int(t) for t in nums if t.isdigit()]
        if not indices:
            await m.answer("‚ùå –ü—Ä–∏—à–ª–∏ –Ω–æ–º–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>2 5 6</code>).")
            return
        cnt = contacts_delete(indices)
        await m.answer(f"üóë –£–¥–∞–ª–µ–Ω–æ: {cnt}")
        _clear_state(m.chat.id)
        return

    if action == "contacts_import":
        try:
            lst = json.loads(m.text or "[]")
            assert isinstance(lst, list)
            for x in lst:
                assert "label" in x and "url" in x
            contacts_set(lst)
            await m.answer("üì• –ò–º–ø–æ—Ä—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω.")
        except Exception as e:
            await m.answer(f"‚ùå –û—à–∏–±–∫–∞ JSON: <code>{e}</code>")
        _clear_state(m.chat.id)
        return

    # --- –º–µ–Ω–µ–¥–∂–µ—Ä—ã ---
    if action == "set_manager_1":
        set_manager(1, m.text or "")
        await m.answer("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä 1 –æ–±–Ω–æ–≤–ª—ë–Ω (—Å—Å—ã–ª–∫–∞: <code>/go/telegram/USERNAME</code>, —Ç–µ–∫—Å—Ç: <code>@USERNAME</code>).")
        _clear_state(m.chat.id)
        return

    if action == "set_manager_2":
        set_manager(2, m.text or "")
        await m.answer("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä 2 –æ–±–Ω–æ–≤–ª—ë–Ω (—Å—Å—ã–ª–∫–∞: <code>/go/telegram/USERNAME</code>, —Ç–µ–∫—Å—Ç: <code>@USERNAME</code>).")
        _clear_state(m.chat.id)
        return

    # --- –ø–æ–∏—Å–∫/–∑–∞–º–µ–Ω–∞ ---
    if action == "find_string":
        needle = (m.text or "").strip()
        if not needle:
            await m.answer("‚ùå –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞. –û—Ç–º–µ–Ω–µ–Ω–æ.")
            _clear_state(m.chat.id)
            return
        rep = find_occurrences(needle)
        if not rep["exists"]:
            await m.answer(f"üôÖ‚Äç‚ôÇÔ∏è –°—Ç—Ä–æ–∫–∞ <code>{needle}</code> –Ω–∏–≥–¥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        else:
            cnt = rep["counts"]; pos = rep["positions"]
            lines = [
                f"üîç –ù–∞–π–¥–µ–Ω–æ –¥–ª—è <code>{needle}</code>:",
                f"‚Ä¢ –ó–∞–≥–æ–ª–æ–≤–æ–∫: {cnt['title']}",
                f"‚Ä¢ –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫: {cnt['subtitle']}",
                f"‚Ä¢ –§—É—Ç–µ—Ä: {cnt['footer']}",
                f"‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç—ã (–º–µ—Ç–∫–∏): {cnt['contacts_label']} ‚Äî –∏–Ω–¥–µ–∫—Å—ã: {pos['contacts_label_idx'] or '-'}",
                f"‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç—ã (—Å—Å—ã–ª–∫–∏): {cnt['contacts_url']} ‚Äî –∏–Ω–¥–µ–∫—Å—ã: {pos['contacts_url_idx'] or '-'}",
                f"–ò—Ç–æ–≥–æ –ø–æ–ª–µ–π —Å –≤—Ö–æ–∂–¥–µ–Ω–∏—è–º–∏: {cnt['total_slots']}",
            ]
            await m.answer("\n".join(lines))
        _clear_state(m.chat.id)
        return

    if action == "replace_old":
        old = (m.text or "").strip()
        if not old:
            await m.answer("‚ùå –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞. –û—Ç–º–µ–Ω–µ–Ω–æ.")
            _clear_state(m.chat.id); return
        _set_state(m.chat.id, "replace_new", step=2, data={"old": old})
        await m.answer(f"–®–∞–≥ 2/2. –ü—Ä–∏—à–ª–∏ <b>–Ω–æ–≤—É—é</b> —Å—Ç—Ä–æ–∫—É –¥–ª—è –∑–∞–º–µ–Ω—ã ¬´<code>{old}</code>¬ª.")
        return

    if action == "replace_new":
        new = (m.text or "").strip()
        old = PENDING.get(m.chat.id, {}).get("data", {}).get("old")
        if not old:
            await m.answer("‚ùå –ù–µ –≤–∏–∂—É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —à–∞–≥–∞. –ù–∞—á–Ω–∏ —Å–Ω–æ–≤–∞: ¬´üîÅ –ó–∞–º–µ–Ω–∏—Ç—å —Å—Ç—Ä–æ–∫—É¬ª.")
            _clear_state(m.chat.id); return
        if not new:
            await m.answer("‚ùå –ü—É—Å—Ç–∞—è –Ω–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞. –û—Ç–º–µ–Ω–µ–Ω–æ.")
            _clear_state(m.chat.id); return

        pre = find_occurrences(old)
        if not pre["exists"]:
            await m.answer(f"üôÖ‚Äç‚ôÇÔ∏è –°—Ç—Ä–æ–∫–∞ <code>{old}</code> –Ω–∏–≥–¥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è—é.")
            _clear_state(m.chat.id); return

        rep = replace_exact_everywhere(old, new)
        cnt = rep["counts"]; post = rep.get("post_counts", {})
        lines = [
            "‚úÖ –ì–æ—Ç–æ–≤–æ. –û—Ç—á—ë—Ç –ø–æ –∑–∞–º–µ–Ω–µ:",
            f"–ò—Å–∫–∞–ª: <code>{old}</code>",
            f"–ó–∞–º–µ–Ω–∏–ª –Ω–∞: <code>{new}</code>",
            "",
            "üîπ –î–æ:",
            f"‚Ä¢ Title: {cnt['title']} | Subtitle: {cnt['subtitle']} | Footer: {cnt['footer']}",
            f"‚Ä¢ Contacts label: {cnt['contacts_label']} | url: {cnt['contacts_url']}",
        ]
        if post:
            lines += [
                "",
                "üîπ –ü–æ—Å–ª–µ:",
                f"‚Ä¢ Title: {post['title']} | Subtitle: {post['subtitle']} | Footer: {post['footer']}",
                f"‚Ä¢ Contacts label: {post['contacts_label']} | url: {post['contacts_url']}",
            ]
        await m.answer("\n".join(lines))
        _clear_state(m.chat.id)
        return


# ===================== –ó–ê–ü–£–°–ö =====================

def main():
    """–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ (–¥–ª—è standalone —Ä–µ–∂–∏–º–∞)"""
    log.info("Bot is starting‚Ä¶")
    asyncio.run(dp.start_polling(bot))

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
bot = bot
dp = dp

if __name__ == "__main__":
    main()


if __name__ == "__main__":
    main()
